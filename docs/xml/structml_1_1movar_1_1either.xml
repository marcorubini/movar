<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structml_1_1movar_1_1either" kind="class" language="C++" prot="public">
    <compoundname>ml::movar::either</compoundname>
    <includes local="no">ml/movar/internal/type/either.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T1</type>
      </param>
      <param>
        <type>class T2</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Observers</header>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1afc90161c5008fe756b4d3eb0d58af881" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr long</type>
        <definition>constexpr long ml::movar::either&lt; T1, T2 &gt;::index</definition>
        <argsstring>() const noexcept</argsstring>
        <name>index</name>
        <qualifiedname>ml::movar::either::index</qualifiedname>
        <briefdescription>
<para>Returns the active index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="65" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1ad599c6230af91595fab18e1adbff1316" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool ml::movar::either&lt; T1, T2 &gt;::is_nothing</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_nothing</name>
        <qualifiedname>ml::movar::either::is_nothing</qualifiedname>
        <briefdescription>
<para>Returns false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="73" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1ac576547644cf58fc96def76bc99922d0" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool ml::movar::either&lt; T1, T2 &gt;::is_something</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_something</name>
        <qualifiedname>ml::movar::either::is_something</qualifiedname>
        <briefdescription>
<para>Returns true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="81" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a7ecc412256c70b2132d4053d109f171c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>long</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool ml::movar::either&lt; T1, T2 &gt;::is</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is</name>
        <qualifiedname>ml::movar::either::is</qualifiedname>
    <requiresclause>(internal::movar::ContainsIndex&lt;either, Index&gt; || Index == -1)    </requiresclause>
        <briefdescription>
<para>Returns true if <emphasis>Index</emphasis> equals the active index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>can be 0, 1 or -1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="92" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1ab0f88c3e2a3464f54db1e0e527f80104" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool ml::movar::either&lt; T1, T2 &gt;::is</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is</name>
        <qualifiedname>ml::movar::either::is</qualifiedname>
    <requiresclause>(internal::movar::ContainsAlternative&lt;either, T&gt; || std::same_as&lt;T, nothing&gt;)    </requiresclause>
        <briefdescription>
<para>Returns true if <emphasis>T</emphasis> equals the active type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>can be T1, T2 or <ref refid="structml_1_1movar_1_1nothing" kindref="compound">ml::movar::nothing</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="107" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="107" bodyend="116"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Getters</header>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a9ad46e06d12e34ac068b3d7c43a3d221" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>long</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto const &amp;</type>
        <definition>constexpr auto const  &amp; ml::movar::either&lt; T1, T2 &gt;::get</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::either::get</qualifiedname>
    <requiresclause>(internal::movar::ContainsIndex&lt;either, Index&gt;)    </requiresclause>
        <briefdescription>
<para>get with index (overload 1) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>can be 0 or 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="128" column="27" bodyfile="ml/movar/internal/type/either.hpp" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a525ee481ea495a3ad1481757d62d21bf" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>long</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto &amp;</type>
        <definition>constexpr auto &amp; ml::movar::either&lt; T1, T2 &gt;::get</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::either::get</qualifiedname>
    <requiresclause>(internal::movar::ContainsIndex&lt;either, Index&gt;)    </requiresclause>
        <briefdescription>
<para>get with index (overload 2) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>can be 0 or 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="139" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a11b9e5cd56b3378977924eefc7b85e18" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>long</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::either&lt; T1, T2 &gt;::get</definition>
        <argsstring>() &amp;&amp;noexcept(std::is_nothrow_move_constructible_v&lt; T1 &gt; &amp;&amp;std::is_nothrow_move_constructible_v&lt; T2 &gt;)</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::either::get</qualifiedname>
    <requiresclause>(internal::movar::ContainsIndex&lt;either, Index&gt;)    </requiresclause>
        <briefdescription>
<para>get with index (overload 3) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>can be 0 or 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="150" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="150" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a84efa6eb0e478381da5ae8bba91a2b67" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr T const &amp;</type>
        <definition>constexpr T const  &amp; ml::movar::either&lt; T1, T2 &gt;::get</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::either::get</qualifiedname>
    <requiresclause>(internal::movar::ContainsAlternative&lt;either, T&gt;)    </requiresclause>
        <briefdescription>
<para>get with type (overload 1) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>can be <emphasis>T1</emphasis> or <emphasis>T2</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="162" column="24" bodyfile="ml/movar/internal/type/either.hpp" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a044a812dee94baaedfb66c4c1475eab8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr T &amp;</type>
        <definition>constexpr T &amp; ml::movar::either&lt; T1, T2 &gt;::get</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::either::get</qualifiedname>
    <requiresclause>(internal::movar::ContainsAlternative&lt;either, T&gt;)    </requiresclause>
        <briefdescription>
<para>get with type (overload 2) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>can be <emphasis>T1</emphasis> or <emphasis>T2</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="173" column="18" bodyfile="ml/movar/internal/type/either.hpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1af0df64f1679021e4a43003666bb4785b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T ml::movar::either&lt; T1, T2 &gt;::get</definition>
        <argsstring>() &amp;&amp;noexcept(std::is_nothrow_move_constructible_v&lt; T1 &gt; &amp;&amp;std::is_nothrow_move_constructible_v&lt; T2 &gt;)</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::either::get</qualifiedname>
    <requiresclause>(internal::movar::ContainsAlternative&lt;either, T&gt;)    </requiresclause>
        <briefdescription>
<para>get with type (overload 3) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>can be <emphasis>T1</emphasis> or <emphasis>T2</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="184" column="18" bodyfile="ml/movar/internal/type/either.hpp" bodystart="184" bodyend="188"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Pipeline</header>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1adbc8a974e9f2a0056124871978e04ccf" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::WeakVisitor&lt; <ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> const &amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::either&lt; T1, T2 &gt;::map</definition>
        <argsstring>(Vis vis) const &amp;</argsstring>
        <name>map</name>
        <qualifiedname>ml::movar::either::map</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-map" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="250" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1ac75b5be2de337b52f827c536ecd388be" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::WeakVisitor&lt; <ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> &amp;&amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::either&lt; T1, T2 &gt;::map</definition>
        <argsstring>(Vis vis) &amp;&amp;</argsstring>
        <name>map</name>
        <qualifiedname>ml::movar::either::map</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-map" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="259" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1ab15d03d3b3afe208fdc0c64c07a6ede0" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::Visitor&lt; <ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> const &amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::either&lt; T1, T2 &gt;::match</definition>
        <argsstring>(Vis vis) const &amp;</argsstring>
        <name>match</name>
        <qualifiedname>ml::movar::either::match</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-match" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="268" column="20" bodyfile="ml/movar/internal/type/either.hpp" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1aa046fc5dae6434e08e80985151f792df" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::Visitor&lt; <ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> &amp;&amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::either&lt; T1, T2 &gt;::match</definition>
        <argsstring>(Vis vis) &amp;&amp;</argsstring>
        <name>match</name>
        <qualifiedname>ml::movar::either::match</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-match" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="277" column="20" bodyfile="ml/movar/internal/type/either.hpp" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a67575998e49fe669adbd6cc19eaefaf3" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::WeakVisitor&lt; <ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> const &amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
          <param>
            <type>std::move_constructible</type>
            <declname>Default</declname>
            <defname>Default</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::either&lt; T1, T2 &gt;::map_or</definition>
        <argsstring>(Vis vis, Default def) const &amp;</argsstring>
        <name>map_or</name>
        <qualifiedname>ml::movar::either::map_or</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <param>
          <type>Default</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-map_or" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="286" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a7ef75c4e9ee0b0eca6a29cffea7304f8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::WeakVisitor&lt; <ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> &amp;&amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
          <param>
            <type>std::move_constructible</type>
            <declname>Default</declname>
            <defname>Default</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::either&lt; T1, T2 &gt;::map_or</definition>
        <argsstring>(Vis vis, Default def) &amp;&amp;</argsstring>
        <name>map_or</name>
        <qualifiedname>ml::movar::either::map_or</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <param>
          <type>Default</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-map_or" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="295" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1abcb072de128461d360f7b91553fbfe40" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::WeakVisitor&lt; <ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> const &amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
          <param>
            <type>internal::movar::Lazy</type>
            <declname>Default</declname>
            <defname>Default</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::either&lt; T1, T2 &gt;::map_or_else</definition>
        <argsstring>(Vis vis, Default def) const &amp;</argsstring>
        <name>map_or_else</name>
        <qualifiedname>ml::movar::either::map_or_else</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <param>
          <type>Default</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-map_or_else" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="304" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="304" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a756f01934fcf37fe08924741f89fb72c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::WeakVisitor&lt; <ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> &amp;&amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
          <param>
            <type>internal::movar::Lazy</type>
            <declname>Default</declname>
            <defname>Default</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::either&lt; T1, T2 &gt;::map_or_else</definition>
        <argsstring>(Vis vis, Default def) &amp;&amp;</argsstring>
        <name>map_or_else</name>
        <qualifiedname>ml::movar::either::map_or_else</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <param>
          <type>Default</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-map_or_else" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="313" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a1a943c5bd4552fe963c80703b6d9734a" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::Lazy</type>
            <declname>Default</declname>
            <defname>Default</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::either&lt; T1, T2 &gt;::or_else</definition>
        <argsstring>(Default def) const &amp;</argsstring>
        <name>or_else</name>
        <qualifiedname>ml::movar::either::or_else</qualifiedname>
        <param>
          <type>Default</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-or_else" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="322" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1ab998e790ff529301062be23c6145fd84" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::Lazy</type>
            <declname>Default</declname>
            <defname>Default</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::either&lt; T1, T2 &gt;::or_else</definition>
        <argsstring>(Default def) &amp;&amp;</argsstring>
        <name>or_else</name>
        <qualifiedname>ml::movar::either::or_else</qualifiedname>
        <param>
          <type>Default</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-or_else" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="331" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="331" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a6dab623fafb77477b5560b66a1f08b6b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::either&lt; T1, T2 &gt;::take</definition>
        <argsstring>()</argsstring>
        <name>take</name>
        <qualifiedname>ml::movar::either::take</qualifiedname>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-take" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="339" column="21" bodyfile="ml/movar/internal/type/either.hpp" bodystart="339" bodyend="342"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Friends</header>
      <memberdef kind="friend" id="structml_1_1movar_1_1either_1a67536cc0e8a041806741b95220dd5442" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>long</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is</definition>
        <argsstring>(either const &amp;self) noexcept</argsstring>
        <name>is</name>
        <qualifiedname>ml::movar::either::is</qualifiedname>
        <param>
          <type><ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> const &amp;</type>
          <declname>self</declname>
        </param>
    <requiresclause>(internal::movar::ContainsIndex&lt;either, Index&gt; || Index == -1)    </requiresclause>
        <briefdescription>
<para>Returns true if <emphasis>Index</emphasis> equals the active index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>can be 0, 1 or -1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="200" column="28" bodyfile="ml/movar/internal/type/either.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="friend" id="structml_1_1movar_1_1either_1a021343ca4c54d37c8e102cb5af94fa9f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is</definition>
        <argsstring>(either const &amp;self) noexcept</argsstring>
        <name>is</name>
        <qualifiedname>ml::movar::either::is</qualifiedname>
        <param>
          <type><ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> const &amp;</type>
          <declname>self</declname>
        </param>
    <requiresclause>(internal::movar::ContainsAlternative&lt;either, T&gt; || std::same_as&lt;T, nothing&gt;)    </requiresclause>
        <briefdescription>
<para>Returns true if <emphasis>T</emphasis> equals the active type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>can be <emphasis>T1</emphasis>, <emphasis>T2</emphasis> or <ref refid="structml_1_1movar_1_1nothing" kindref="compound">ml::movar::nothing</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="211" column="28" bodyfile="ml/movar/internal/type/either.hpp" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="friend" id="structml_1_1movar_1_1either_1acd91369713d227368381ce72c6292389" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>long</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
          <param>
            <type>internal::movar::SameUnqual&lt; <ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> &gt;</type>
            <declname>Self</declname>
            <defname>Self</defname>
          </param>
        </templateparamlist>
        <type>constexpr decltype(auto)</type>
        <definition>constexpr decltype(auto) get</definition>
        <argsstring>(Self &amp;&amp;self) noexcept(noexcept(std::forward&lt; Self &gt;(self).template get&lt; Index &gt;()))</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::either::get</qualifiedname>
        <param>
          <type>Self &amp;&amp;</type>
          <declname>self</declname>
        </param>
    <requiresclause>(internal::movar::ContainsIndex&lt;either, Index&gt;)    </requiresclause>
        <briefdescription>
<para>get with Index </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>can be 0, 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Self</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="223" column="33" bodyfile="ml/movar/internal/type/either.hpp" bodystart="223" bodyend="227"/>
      </memberdef>
      <memberdef kind="friend" id="structml_1_1movar_1_1either_1af180e8de0d9aeb6815765ba41b039e2b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>internal::movar::SameUnqual&lt; <ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> &gt;</type>
            <declname>Self</declname>
            <defname>Self</defname>
          </param>
        </templateparamlist>
        <type>constexpr decltype(auto)</type>
        <definition>constexpr decltype(auto) get</definition>
        <argsstring>(Self &amp;&amp;self) noexcept(noexcept(std::forward&lt; Self &gt;(self).template get&lt; T &gt;()))</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::either::get</qualifiedname>
        <param>
          <type>Self &amp;&amp;</type>
          <declname>self</declname>
        </param>
    <requiresclause>(internal::movar::ContainsAlternative&lt;either, T&gt;)    </requiresclause>
        <briefdescription>
<para>get with type </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>can be <emphasis>T1</emphasis> or <emphasis>T2</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Self</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="236" column="33" bodyfile="ml/movar/internal/type/either.hpp" bodystart="236" bodyend="240"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structml_1_1movar_1_1either_1ad73b2aa2f3937f9148c29e3a5d2b16d3" prot="public" static="no">
        <type>T1</type>
        <definition>using ml::movar::either&lt; T1, T2 &gt;::first_type =  T1</definition>
        <argsstring></argsstring>
        <name>first_type</name>
        <qualifiedname>ml::movar::either::first_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="26" column="5" bodyfile="ml/movar/internal/type/either.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structml_1_1movar_1_1either_1a218fa1988bf3a19a55f2645317966a1b" prot="public" static="no">
        <type>T2</type>
        <definition>using ml::movar::either&lt; T1, T2 &gt;::second_type =  T2</definition>
        <argsstring></argsstring>
        <name>second_type</name>
        <qualifiedname>ml::movar::either::second_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="27" column="5" bodyfile="ml/movar/internal/type/either.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structml_1_1movar_1_1either_1a509faac5848e48c87792b2ae3ddf1314" prot="public" static="no" mutable="no">
        <type>std::variant&lt; T1, T2 &gt;</type>
        <definition>std::variant&lt;T1, T2&gt; ml::movar::either&lt; T1, T2 &gt;::_value</definition>
        <argsstring></argsstring>
        <name>_value</name>
        <qualifiedname>ml::movar::either::_value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="29" column="18" bodyfile="ml/movar/internal/type/either.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a6e74df0931ffa32e13756a543713dde6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr ml::movar::either&lt; T1, T2 &gt;::either</definition>
        <argsstring>()=default</argsstring>
        <name>either</name>
        <qualifiedname>ml::movar::either::either</qualifiedname>
        <briefdescription>
<para>default constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="34" column="15"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a423f2e56f77a10554dbf1172e85afb64" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr ml::movar::either&lt; T1, T2 &gt;::either</definition>
        <argsstring>(T1 value) noexcept(std::is_nothrow_move_constructible_v&lt; T1 &gt;)</argsstring>
        <name>either</name>
        <qualifiedname>ml::movar::either::either</qualifiedname>
        <param>
          <type>T1</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Move-constructs an instance of <emphasis>T1</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="39" column="15" bodyfile="ml/movar/internal/type/either.hpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a0dbf4efea6c175c894d731fad18fc2fd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr ml::movar::either&lt; T1, T2 &gt;::either</definition>
        <argsstring>(T2 value) noexcept(std::is_nothrow_move_constructible_v&lt; T2 &gt;)</argsstring>
        <name>either</name>
        <qualifiedname>ml::movar::either::either</qualifiedname>
        <param>
          <type>T2</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Move-constructs an instance of <emphasis>T2</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="47" column="15" bodyfile="ml/movar/internal/type/either.hpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a2d56b425bdfa594a53270c39e77a59a1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::DiffUnqual&lt; <ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> &gt;</type>
            <declname>Other</declname>
            <defname>Other</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>ml::movar::either&lt; T1, T2 &gt;::explicit</definition>
        <argsstring>(!internal::movar::can_implicit_cast&lt; Other, either &gt;) const expr either(Other other) noexcept(noexcept(either(internal::movar::impl::cast&lt; either &gt;(std::move(other)))))</argsstring>
        <name>explicit</name>
        <qualifiedname>ml::movar::either::explicit</qualifiedname>
        <param>
          <type>!internal::movar::can_implicit_cast&lt; Other, <ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> &gt;</type>
        </param>
    <requiresclause>(internal::movar::can_explicit_cast&lt;Other, either&gt;)    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="54" column="5" bodyfile="ml/movar/internal/type/either.hpp" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a5b4c2175cf148968d706ab56a1edbb58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ml::movar::either&lt; T1, T2 &gt;::operator==</definition>
        <argsstring>(either const &amp;) const =default</argsstring>
        <name>operator==</name>
        <qualifiedname>ml::movar::either::operator==</qualifiedname>
        <param>
          <type><ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>defaulf equality </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="349" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1either_1a8b9ecbe54869bec0aa25b8f0db8a2d55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto ml::movar::either&lt; T1, T2 &gt;::operator&lt;=&gt;</definition>
        <argsstring>(either const &amp;) const =default</argsstring>
        <name>operator&lt;=&gt;</name>
        <qualifiedname>ml::movar::either::operator&lt;=&gt;</qualifiedname>
        <param>
          <type><ref refid="structml_1_1movar_1_1either" kindref="compound">either</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>default comparison </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/either.hpp" line="354" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A variant type with two alternatives. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="structml_1_1movar_1_1either" kindref="compound">ml::movar::either</ref> is a Variant of size 2 that always has a value. </para>
    </detaileddescription>
    <location file="ml/movar/internal/type/either.hpp" line="19" column="3" bodyfile="ml/movar/internal/type/either.hpp" bodystart="20" bodyend="355"/>
    <listofallmembers>
      <member refid="structml_1_1movar_1_1either_1a509faac5848e48c87792b2ae3ddf1314" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>_value</name></member>
      <member refid="structml_1_1movar_1_1either_1a6e74df0931ffa32e13756a543713dde6" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>either</name></member>
      <member refid="structml_1_1movar_1_1either_1a423f2e56f77a10554dbf1172e85afb64" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>either</name></member>
      <member refid="structml_1_1movar_1_1either_1a0dbf4efea6c175c894d731fad18fc2fd" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>either</name></member>
      <member refid="structml_1_1movar_1_1either_1a2d56b425bdfa594a53270c39e77a59a1" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>explicit</name></member>
      <member refid="structml_1_1movar_1_1either_1ad73b2aa2f3937f9148c29e3a5d2b16d3" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>first_type</name></member>
      <member refid="structml_1_1movar_1_1either_1a9ad46e06d12e34ac068b3d7c43a3d221" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1either_1a525ee481ea495a3ad1481757d62d21bf" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1either_1a11b9e5cd56b3378977924eefc7b85e18" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1either_1a84efa6eb0e478381da5ae8bba91a2b67" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1either_1a044a812dee94baaedfb66c4c1475eab8" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1either_1af0df64f1679021e4a43003666bb4785b" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1either_1acd91369713d227368381ce72c6292389" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1either_1af180e8de0d9aeb6815765ba41b039e2b" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1either_1afc90161c5008fe756b4d3eb0d58af881" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>index</name></member>
      <member refid="structml_1_1movar_1_1either_1a7ecc412256c70b2132d4053d109f171c" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>is</name></member>
      <member refid="structml_1_1movar_1_1either_1ab0f88c3e2a3464f54db1e0e527f80104" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>is</name></member>
      <member refid="structml_1_1movar_1_1either_1a67536cc0e8a041806741b95220dd5442" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>is</name></member>
      <member refid="structml_1_1movar_1_1either_1a021343ca4c54d37c8e102cb5af94fa9f" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>is</name></member>
      <member refid="structml_1_1movar_1_1either_1ad599c6230af91595fab18e1adbff1316" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>is_nothing</name></member>
      <member refid="structml_1_1movar_1_1either_1ac576547644cf58fc96def76bc99922d0" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>is_something</name></member>
      <member refid="structml_1_1movar_1_1either_1adbc8a974e9f2a0056124871978e04ccf" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>map</name></member>
      <member refid="structml_1_1movar_1_1either_1ac75b5be2de337b52f827c536ecd388be" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>map</name></member>
      <member refid="structml_1_1movar_1_1either_1a67575998e49fe669adbd6cc19eaefaf3" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>map_or</name></member>
      <member refid="structml_1_1movar_1_1either_1a7ef75c4e9ee0b0eca6a29cffea7304f8" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>map_or</name></member>
      <member refid="structml_1_1movar_1_1either_1abcb072de128461d360f7b91553fbfe40" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>map_or_else</name></member>
      <member refid="structml_1_1movar_1_1either_1a756f01934fcf37fe08924741f89fb72c" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>map_or_else</name></member>
      <member refid="structml_1_1movar_1_1either_1ab15d03d3b3afe208fdc0c64c07a6ede0" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>match</name></member>
      <member refid="structml_1_1movar_1_1either_1aa046fc5dae6434e08e80985151f792df" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>match</name></member>
      <member refid="structml_1_1movar_1_1either_1a8b9ecbe54869bec0aa25b8f0db8a2d55" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>operator&lt;=&gt;</name></member>
      <member refid="structml_1_1movar_1_1either_1a5b4c2175cf148968d706ab56a1edbb58" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>operator==</name></member>
      <member refid="structml_1_1movar_1_1either_1a1a943c5bd4552fe963c80703b6d9734a" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>or_else</name></member>
      <member refid="structml_1_1movar_1_1either_1ab998e790ff529301062be23c6145fd84" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>or_else</name></member>
      <member refid="structml_1_1movar_1_1either_1a218fa1988bf3a19a55f2645317966a1b" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>second_type</name></member>
      <member refid="structml_1_1movar_1_1either_1a6dab623fafb77477b5560b66a1f08b6b" prot="public" virt="non-virtual"><scope>ml::movar::either</scope><name>take</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
