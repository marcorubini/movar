<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4" kind="struct" language="C++" prot="public">
    <compoundname>ml::movar::fork&lt; T1, T2 &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>std::move_constructible</type>
        <declname>T1</declname>
        <defname>T1</defname>
      </param>
      <param>
        <type>std::move_constructible</type>
        <declname>T2</declname>
        <defname>T2</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1ac43b12c18703422a193f9cf448ea6d58" prot="public" static="no" mutable="no">
        <type>T1</type>
        <definition>T1 ml::movar::fork&lt; T1, T2 &gt;::_first</definition>
        <argsstring></argsstring>
        <name>_first</name>
        <qualifiedname>ml::movar::fork&lt; T1, T2 &gt;::_first</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/fork.hpp" line="68" column="8" bodyfile="ml/movar/internal/pipe/fork.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1a93376b231ab42935c7a3838cc20aea29" prot="public" static="no" mutable="no">
        <type>T2</type>
        <definition>T2 ml::movar::fork&lt; T1, T2 &gt;::_second</definition>
        <argsstring></argsstring>
        <name>_second</name>
        <qualifiedname>ml::movar::fork&lt; T1, T2 &gt;::_second</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/fork.hpp" line="69" column="8" bodyfile="ml/movar/internal/pipe/fork.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1aeef09af2fb63a6c05a07a060c1458f26" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr ml::movar::fork&lt; T1, T2 &gt;::fork</definition>
        <argsstring>(T1 first, T2 second) noexcept(std::is_nothrow_move_constructible_v&lt; T1 &gt; &amp;&amp;std::is_nothrow_move_constructible_v&lt; T2 &gt;)</argsstring>
        <name>fork</name>
        <qualifiedname>ml::movar::fork&lt; T1, T2 &gt;::fork</qualifiedname>
        <param>
          <type>T1</type>
          <declname>first</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/fork.hpp" line="71" column="15" bodyfile="ml/movar/internal/pipe/fork.hpp" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1a70e236bfd5d523a42df986b95d3d2b8b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Arg</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::fork&lt; T1, T2 &gt;::operator()</definition>
        <argsstring>(Arg &amp;&amp;arg) const</argsstring>
        <name>operator()</name>
        <qualifiedname>ml::movar::fork&lt; T1, T2 &gt;::operator()</qualifiedname>
        <param>
          <type>Arg &amp;&amp;</type>
          <declname>arg</declname>
        </param>
    <requiresclause>(ml::internal::movar::WrapInvocable&lt;T1 const&amp;, Arg&amp;&gt; // || ml::internal::movar::WrapInvocable&lt;T2 const&amp;, Arg&amp;&gt;)    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/fork.hpp" line="78" column="21" bodyfile="ml/movar/internal/pipe/fork.hpp" bodystart="78" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1a337e6e46ab06f4e45058e667f06c0f8e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Other</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::fork&lt; T1, T2 &gt;::operator&gt;&gt;</definition>
        <argsstring>(Other &amp;&amp;other) const &amp;</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>ml::movar::fork&lt; T1, T2 &gt;::operator&gt;&gt;</qualifiedname>
        <param>
          <type>Other &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/fork.hpp" line="97" column="21" bodyfile="ml/movar/internal/pipe/fork.hpp" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1a874746c0abb773b3a07b00fee3ed8101" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Other</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::fork&lt; T1, T2 &gt;::operator&gt;&gt;</definition>
        <argsstring>(Other &amp;&amp;other) &amp;&amp;</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>ml::movar::fork&lt; T1, T2 &gt;::operator&gt;&gt;</qualifiedname>
        <param>
          <type>Other &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/fork.hpp" line="104" column="21" bodyfile="ml/movar/internal/pipe/fork.hpp" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1a91af71fd58b419088e8a392657634c90" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Other</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::fork&lt; T1, T2 &gt;::operator|</definition>
        <argsstring>(Other &amp;&amp;other) const &amp;</argsstring>
        <name>operator|</name>
        <qualifiedname>ml::movar::fork&lt; T1, T2 &gt;::operator|</qualifiedname>
        <param>
          <type>Other &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/fork.hpp" line="111" column="21" bodyfile="ml/movar/internal/pipe/fork.hpp" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1a2bc33d47493cdd500480b987511cbe63" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Other</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::fork&lt; T1, T2 &gt;::operator|</definition>
        <argsstring>(Other &amp;&amp;other) &amp;&amp;</argsstring>
        <name>operator|</name>
        <qualifiedname>ml::movar::fork&lt; T1, T2 &gt;::operator|</qualifiedname>
        <param>
          <type>Other &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/fork.hpp" line="118" column="21" bodyfile="ml/movar/internal/pipe/fork.hpp" bodystart="118" bodyend="122"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ml/movar/internal/pipe/fork.hpp" line="66" column="3" bodyfile="ml/movar/internal/pipe/fork.hpp" bodystart="67" bodyend="123"/>
    <listofallmembers>
      <member refid="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1ac43b12c18703422a193f9cf448ea6d58" prot="public" virt="non-virtual"><scope>ml::movar::fork&lt; T1, T2 &gt;</scope><name>_first</name></member>
      <member refid="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1a93376b231ab42935c7a3838cc20aea29" prot="public" virt="non-virtual"><scope>ml::movar::fork&lt; T1, T2 &gt;</scope><name>_second</name></member>
      <member refid="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1aeef09af2fb63a6c05a07a060c1458f26" prot="public" virt="non-virtual"><scope>ml::movar::fork&lt; T1, T2 &gt;</scope><name>fork</name></member>
      <member refid="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1a70e236bfd5d523a42df986b95d3d2b8b" prot="public" virt="non-virtual"><scope>ml::movar::fork&lt; T1, T2 &gt;</scope><name>operator()</name></member>
      <member refid="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1a337e6e46ab06f4e45058e667f06c0f8e" prot="public" virt="non-virtual"><scope>ml::movar::fork&lt; T1, T2 &gt;</scope><name>operator&gt;&gt;</name></member>
      <member refid="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1a874746c0abb773b3a07b00fee3ed8101" prot="public" virt="non-virtual"><scope>ml::movar::fork&lt; T1, T2 &gt;</scope><name>operator&gt;&gt;</name></member>
      <member refid="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1a91af71fd58b419088e8a392657634c90" prot="public" virt="non-virtual"><scope>ml::movar::fork&lt; T1, T2 &gt;</scope><name>operator|</name></member>
      <member refid="structml_1_1movar_1_1fork_3_01T1_00_01T2_01_4_1a2bc33d47493cdd500480b987511cbe63" prot="public" virt="non-virtual"><scope>ml::movar::fork&lt; T1, T2 &gt;</scope><name>operator|</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
