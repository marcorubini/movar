<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structml_1_1movar_1_1variant" kind="class" language="C++" prot="public">
    <compoundname>ml::movar::variant</compoundname>
    <includes local="no">ml/movar/internal/type/variant.hpp</includes>
    <templateparamlist>
      <param>
        <type>class...</type>
        <declname>Ts</declname>
        <defname>Ts</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Observers</header>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a20e910b35b3e51c9090d6ae7acb604ae" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr long</type>
        <definition>constexpr long ml::movar::variant&lt; Ts &gt;::index</definition>
        <argsstring>() const noexcept</argsstring>
        <name>index</name>
        <qualifiedname>ml::movar::variant::index</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the active index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="51" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a77ae003912d65cd9deee0524ad62dfb5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool ml::movar::variant&lt; Ts &gt;::is_nothing</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_nothing</name>
        <qualifiedname>ml::movar::variant::is_nothing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="59" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a41294ad6e4638d6a22d335886d9443ff" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool ml::movar::variant&lt; Ts &gt;::is_something</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_something</name>
        <qualifiedname>ml::movar::variant::is_something</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="67" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a4c7b3973aad13462cee56d07779ee130" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>long</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool ml::movar::variant&lt; Ts &gt;::is</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is</name>
        <qualifiedname>ml::movar::variant::is</qualifiedname>
    <requiresclause>(internal::movar::ContainsIndex&lt;variant, Index&gt; || Index == -1)    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if <emphasis>Index</emphasis> equals the active index </para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>must be in [-1, size) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="78" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a941a111246eefe4e8c2d92bdb9e70c1e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool ml::movar::variant&lt; Ts &gt;::is</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is</name>
        <qualifiedname>ml::movar::variant::is</qualifiedname>
    <requiresclause>(internal::movar::ContainsAlternative&lt;variant, T&gt; || std::same_as&lt;T, nothing&gt;)    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if <emphasis>T</emphasis> equals the active type </para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an alternative or <ref refid="structml_1_1movar_1_1nothing" kindref="compound">ml::movar::nothing</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="93" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="93" bodyend="100"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Getters</header>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a07126931f131025979248a1fd1cd35f5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>long</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto const &amp;</type>
        <definition>constexpr auto const  &amp; ml::movar::variant&lt; Ts &gt;::get</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::variant::get</qualifiedname>
    <requiresclause>(internal::movar::ContainsIndex&lt;variant, Index&gt; || Index == -1)    </requiresclause>
        <briefdescription>
<para>getter given index (overload 1) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>must be in [0, size) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="112" column="27" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1abbc93ff176b938610a266930d7a7adda" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>long</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto &amp;</type>
        <definition>constexpr auto &amp; ml::movar::variant&lt; Ts &gt;::get</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::variant::get</qualifiedname>
    <requiresclause>(internal::movar::ContainsIndex&lt;variant, Index&gt; || Index == -1)    </requiresclause>
        <briefdescription>
<para>getter given index (overload 2) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>must be in [0, size) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="123" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1af0db916d62adc3679671385aabfdf37b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>long</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::variant&lt; Ts &gt;::get</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::variant::get</qualifiedname>
    <requiresclause>(internal::movar::ContainsIndex&lt;variant, Index&gt; || Index == -1)    </requiresclause>
        <briefdescription>
<para>getter given index (overload 3) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>must be in [0, size) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="134" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a4437317d19e82b541876f31170692531" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr T const &amp;</type>
        <definition>constexpr T const  &amp; ml::movar::variant&lt; Ts &gt;::get</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::variant::get</qualifiedname>
    <requiresclause>(internal::movar::ContainsAlternative&lt;variant, T&gt;)    </requiresclause>
        <briefdescription>
<para>getter given type (overload 1) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an alternative </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="145" column="24" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a3ebf574522ee74d59c755a424ef3a59a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr T &amp;</type>
        <definition>constexpr T &amp; ml::movar::variant&lt; Ts &gt;::get</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::variant::get</qualifiedname>
    <requiresclause>(internal::movar::ContainsAlternative&lt;variant, T&gt;)    </requiresclause>
        <briefdescription>
<para>getter given type (overload 2) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an alternative </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="156" column="18" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a09a9b5c572cb16ef01ad6d1236a64423" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T ml::movar::variant&lt; Ts &gt;::get</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::variant::get</qualifiedname>
    <requiresclause>(internal::movar::ContainsAlternative&lt;variant, T&gt;)    </requiresclause>
        <briefdescription>
<para>getter given type (overload 3) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an alternative </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="167" column="18" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="167" bodyend="170"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Pipeline</header>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1ae04a1dc3b7ccaf8e783b7b08dcad25d3" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::WeakVisitor&lt; <ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> const &amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::variant&lt; Ts &gt;::map</definition>
        <argsstring>(Vis vis) const &amp;</argsstring>
        <name>map</name>
        <qualifiedname>ml::movar::variant::map</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-map" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="231" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a20633258d2e655d63d3f1c00416b4529" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::WeakVisitor&lt; <ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> &amp;&amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::variant&lt; Ts &gt;::map</definition>
        <argsstring>(Vis vis) &amp;&amp;</argsstring>
        <name>map</name>
        <qualifiedname>ml::movar::variant::map</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-map" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="240" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a60a93ab68dd5a72f17194c64f96b4bda" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::Visitor&lt; <ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> const &amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::variant&lt; Ts &gt;::match</definition>
        <argsstring>(Vis vis) const &amp;</argsstring>
        <name>match</name>
        <qualifiedname>ml::movar::variant::match</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-match" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="249" column="20" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a81a6193808075eea4187420dbc924074" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::Visitor&lt; <ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> &amp;&amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::variant&lt; Ts &gt;::match</definition>
        <argsstring>(Vis vis) &amp;&amp;</argsstring>
        <name>match</name>
        <qualifiedname>ml::movar::variant::match</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-match" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="258" column="20" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a245fcd0ad6acd23d78076f844699cd55" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::WeakVisitor&lt; <ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> const &amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
          <param>
            <type>std::move_constructible</type>
            <declname>Default</declname>
            <defname>Default</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::variant&lt; Ts &gt;::map_or</definition>
        <argsstring>(Vis vis, Default def) const &amp;</argsstring>
        <name>map_or</name>
        <qualifiedname>ml::movar::variant::map_or</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <param>
          <type>Default</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-map_or" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="267" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a5df20111ac766c161f5cb99167480f6a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::WeakVisitor&lt; <ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> &amp;&amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
          <param>
            <type>std::move_constructible</type>
            <declname>Default</declname>
            <defname>Default</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::variant&lt; Ts &gt;::map_or</definition>
        <argsstring>(Vis vis, Default def) &amp;&amp;</argsstring>
        <name>map_or</name>
        <qualifiedname>ml::movar::variant::map_or</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <param>
          <type>Default</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-map_or" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="276" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1ad389892d48ab68a14069345be4026dd2" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::WeakVisitor&lt; <ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> const &amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
          <param>
            <type>internal::movar::Lazy</type>
            <declname>Default</declname>
            <defname>Default</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::variant&lt; Ts &gt;::map_or_else</definition>
        <argsstring>(Vis vis, Default def) const &amp;</argsstring>
        <name>map_or_else</name>
        <qualifiedname>ml::movar::variant::map_or_else</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <param>
          <type>Default</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-map_or_else" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="285" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a9db7ed8ad9338972b3a1a049706dca59" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::WeakVisitor&lt; <ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> &amp;&amp; &gt;</type>
            <declname>Vis</declname>
            <defname>Vis</defname>
          </param>
          <param>
            <type>internal::movar::Lazy</type>
            <declname>Default</declname>
            <defname>Default</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::variant&lt; Ts &gt;::map_or_else</definition>
        <argsstring>(Vis vis, Default def) &amp;&amp;</argsstring>
        <name>map_or_else</name>
        <qualifiedname>ml::movar::variant::map_or_else</qualifiedname>
        <param>
          <type>Vis</type>
          <declname>vis</declname>
        </param>
        <param>
          <type>Default</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-map_or_else" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="294" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a5c08fef3e377e6e3f18c263884696c93" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::Lazy</type>
            <declname>Default</declname>
            <defname>Default</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::variant&lt; Ts &gt;::or_else</definition>
        <argsstring>(Default def) const &amp;</argsstring>
        <name>or_else</name>
        <qualifiedname>ml::movar::variant::or_else</qualifiedname>
        <param>
          <type>Default</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-or_else" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="303" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="303" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a6fe4c0bc9a828e9df54951af47f3621a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::Lazy</type>
            <declname>Default</declname>
            <defname>Default</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::variant&lt; Ts &gt;::or_else</definition>
        <argsstring>(Default def) &amp;&amp;</argsstring>
        <name>or_else</name>
        <qualifiedname>ml::movar::variant::or_else</qualifiedname>
        <param>
          <type>Default</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-or_else" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="312" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a41a24b8d1cb297e568016516b3c43604" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::variant&lt; Ts &gt;::take</definition>
        <argsstring>()</argsstring>
        <name>take</name>
        <qualifiedname>ml::movar::variant::take</qualifiedname>
        <briefdescription>
<para>see <ref refid="pipelines_1pipelines-take" kindref="member">pipelines documentation</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="320" column="21" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="320" bodyend="323"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Friends</header>
      <memberdef kind="friend" id="structml_1_1movar_1_1variant_1a88be8509168f48d54993d9c3cd6c9e86" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>long</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is</definition>
        <argsstring>(variant const &amp;self) noexcept</argsstring>
        <name>is</name>
        <qualifiedname>ml::movar::variant::is</qualifiedname>
        <param>
          <type><ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> const &amp;</type>
          <declname>self</declname>
        </param>
    <requiresclause>(internal::movar::ContainsIndex&lt;variant, Index&gt; || Index == -1)    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if <emphasis>Index</emphasis> equals the active index </para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>must be in [-1, size) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="182" column="28" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="friend" id="structml_1_1movar_1_1variant_1ad8c7659b9aa091391674ebd83232ccdf" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is</definition>
        <argsstring>(variant const &amp;self) noexcept</argsstring>
        <name>is</name>
        <qualifiedname>ml::movar::variant::is</qualifiedname>
        <param>
          <type><ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> const &amp;</type>
          <declname>self</declname>
        </param>
    <requiresclause>(internal::movar::ContainsAlternative&lt;variant, T&gt; || std::same_as&lt;T, nothing&gt;)    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if <emphasis>T</emphasis> equals the active type </para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an alternative or <ref refid="structml_1_1movar_1_1nothing" kindref="compound">ml::movar::nothing</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="193" column="28" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="friend" id="structml_1_1movar_1_1variant_1a399f1b3bba898b95954fcdf35092d48c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>long</type>
            <declname>Index</declname>
            <defname>Index</defname>
          </param>
          <param>
            <type>internal::movar::SameUnqual&lt; <ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> &gt;</type>
            <declname>Self</declname>
            <defname>Self</defname>
          </param>
        </templateparamlist>
        <type>constexpr decltype(auto)</type>
        <definition>constexpr decltype(auto) get</definition>
        <argsstring>(Self &amp;&amp;self) noexcept(noexcept(std::forward&lt; Self &gt;(self).template get&lt; Index &gt;()))</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::variant::get</qualifiedname>
        <param>
          <type>Self &amp;&amp;</type>
          <declname>self</declname>
        </param>
    <requiresclause>(internal::movar::ContainsIndex&lt;variant, Index&gt;)    </requiresclause>
        <briefdescription>
<para>getter given index </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>must be in [0, size) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="204" column="33" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="204" bodyend="208"/>
      </memberdef>
      <memberdef kind="friend" id="structml_1_1movar_1_1variant_1abbb016418a410a982fe7c6451d94eb0a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>internal::movar::SameUnqual&lt; <ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> &gt;</type>
            <declname>Self</declname>
            <defname>Self</defname>
          </param>
        </templateparamlist>
        <type>constexpr decltype(auto)</type>
        <definition>constexpr decltype(auto) get</definition>
        <argsstring>(Self &amp;&amp;self) noexcept(noexcept(std::forward&lt; Self &gt;(self).template get&lt; T &gt;()))</argsstring>
        <name>get</name>
        <qualifiedname>ml::movar::variant::get</qualifiedname>
        <param>
          <type>Self &amp;&amp;</type>
          <declname>self</declname>
        </param>
    <requiresclause>(internal::movar::ContainsAlternative&lt;variant, T&gt;)    </requiresclause>
        <briefdescription>
<para>getter given type </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an alternative </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="217" column="33" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="217" bodyend="221"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structml_1_1movar_1_1variant_1a43497f8c29a1615a88759fcdc180120c" prot="public" static="no" mutable="no">
        <type>std::variant&lt; Ts... &gt;</type>
        <definition>std::variant&lt;Ts...&gt; ml::movar::variant&lt; Ts &gt;::_value</definition>
        <argsstring></argsstring>
        <name>_value</name>
        <qualifiedname>ml::movar::variant::_value</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="21" column="18" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1ad86c1a464ad0c213a1100108c1fa558b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml::movar::variant&lt; Ts &gt;::variant</definition>
        <argsstring>()=default</argsstring>
        <name>variant</name>
        <qualifiedname>ml::movar::variant::variant</qualifiedname>
        <briefdescription>
<para>default constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="26" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a68975c0e1eb9b3891040c8ccb7981e45" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Init</type>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr ml::movar::variant&lt; Ts &gt;::variant</definition>
        <argsstring>(Init value) noexcept(std::is_nothrow_move_constructible_v&lt; Init &gt;)</argsstring>
        <name>variant</name>
        <qualifiedname>ml::movar::variant::variant</qualifiedname>
        <param>
          <type>Init</type>
          <declname>value</declname>
        </param>
    <requiresclause>(std::same_as&lt;Init, Ts&gt; || ...)    </requiresclause>
        <briefdescription>
<para>Move-construct the alternative. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="33" column="15" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a3bf2c7f43033beded481bd5d718d2348" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>internal::movar::DiffUnqual&lt; <ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> &gt;</type>
            <declname>Other</declname>
            <defname>Other</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>ml::movar::variant&lt; Ts &gt;::explicit</definition>
        <argsstring>(!internal::movar::can_implicit_cast&lt; Other, variant &gt;) const expr variant(Other other) noexcept(noexcept(variant(internal::movar::impl::cast&lt; variant &gt;(std::move(other)))))</argsstring>
        <name>explicit</name>
        <qualifiedname>ml::movar::variant::explicit</qualifiedname>
        <param>
          <type>!internal::movar::can_implicit_cast&lt; Other, <ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> &gt;</type>
        </param>
    <requiresclause>(internal::movar::can_explicit_cast&lt;Other, variant&gt;)    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="40" column="5" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a481b1d765e88b27e58b186002faaa034" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ml::movar::variant&lt; Ts &gt;::operator==</definition>
        <argsstring>(variant const &amp;) const =default</argsstring>
        <name>operator==</name>
        <qualifiedname>ml::movar::variant::operator==</qualifiedname>
        <param>
          <type><ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>default equality </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="330" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1variant_1a7996ccf34be11b00e8e663236b2b30eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto ml::movar::variant&lt; Ts &gt;::operator&lt;=&gt;</definition>
        <argsstring>(variant const &amp;) const =default</argsstring>
        <name>operator&lt;=&gt;</name>
        <qualifiedname>ml::movar::variant::operator&lt;=&gt;</qualifiedname>
        <param>
          <type><ref refid="structml_1_1movar_1_1variant" kindref="compound">variant</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>default compare </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/type/variant.hpp" line="335" column="5"/>
      </memberdef>
      </sectiondef>
    <requiresclause>(sizeof...(Ts) &gt; 0)    </requiresclause>
    <briefdescription>
<para>A variant with many alternatives. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ml/movar/internal/type/variant.hpp" line="14" column="3" bodyfile="ml/movar/internal/type/variant.hpp" bodystart="15" bodyend="336"/>
    <listofallmembers>
      <member refid="structml_1_1movar_1_1variant_1a43497f8c29a1615a88759fcdc180120c" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>_value</name></member>
      <member refid="structml_1_1movar_1_1variant_1a3bf2c7f43033beded481bd5d718d2348" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>explicit</name></member>
      <member refid="structml_1_1movar_1_1variant_1a07126931f131025979248a1fd1cd35f5" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1variant_1abbc93ff176b938610a266930d7a7adda" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1variant_1af0db916d62adc3679671385aabfdf37b" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1variant_1a4437317d19e82b541876f31170692531" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1variant_1a3ebf574522ee74d59c755a424ef3a59a" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1variant_1a09a9b5c572cb16ef01ad6d1236a64423" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1variant_1a399f1b3bba898b95954fcdf35092d48c" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1variant_1abbb016418a410a982fe7c6451d94eb0a" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>get</name></member>
      <member refid="structml_1_1movar_1_1variant_1a20e910b35b3e51c9090d6ae7acb604ae" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>index</name></member>
      <member refid="structml_1_1movar_1_1variant_1a4c7b3973aad13462cee56d07779ee130" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>is</name></member>
      <member refid="structml_1_1movar_1_1variant_1a941a111246eefe4e8c2d92bdb9e70c1e" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>is</name></member>
      <member refid="structml_1_1movar_1_1variant_1a88be8509168f48d54993d9c3cd6c9e86" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>is</name></member>
      <member refid="structml_1_1movar_1_1variant_1ad8c7659b9aa091391674ebd83232ccdf" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>is</name></member>
      <member refid="structml_1_1movar_1_1variant_1a77ae003912d65cd9deee0524ad62dfb5" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>is_nothing</name></member>
      <member refid="structml_1_1movar_1_1variant_1a41294ad6e4638d6a22d335886d9443ff" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>is_something</name></member>
      <member refid="structml_1_1movar_1_1variant_1ae04a1dc3b7ccaf8e783b7b08dcad25d3" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>map</name></member>
      <member refid="structml_1_1movar_1_1variant_1a20633258d2e655d63d3f1c00416b4529" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>map</name></member>
      <member refid="structml_1_1movar_1_1variant_1a245fcd0ad6acd23d78076f844699cd55" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>map_or</name></member>
      <member refid="structml_1_1movar_1_1variant_1a5df20111ac766c161f5cb99167480f6a" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>map_or</name></member>
      <member refid="structml_1_1movar_1_1variant_1ad389892d48ab68a14069345be4026dd2" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>map_or_else</name></member>
      <member refid="structml_1_1movar_1_1variant_1a9db7ed8ad9338972b3a1a049706dca59" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>map_or_else</name></member>
      <member refid="structml_1_1movar_1_1variant_1a60a93ab68dd5a72f17194c64f96b4bda" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>match</name></member>
      <member refid="structml_1_1movar_1_1variant_1a81a6193808075eea4187420dbc924074" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>match</name></member>
      <member refid="structml_1_1movar_1_1variant_1a7996ccf34be11b00e8e663236b2b30eb" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>operator&lt;=&gt;</name></member>
      <member refid="structml_1_1movar_1_1variant_1a481b1d765e88b27e58b186002faaa034" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>operator==</name></member>
      <member refid="structml_1_1movar_1_1variant_1a5c08fef3e377e6e3f18c263884696c93" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>or_else</name></member>
      <member refid="structml_1_1movar_1_1variant_1a6fe4c0bc9a828e9df54951af47f3621a" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>or_else</name></member>
      <member refid="structml_1_1movar_1_1variant_1a41a24b8d1cb297e568016516b3c43604" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>take</name></member>
      <member refid="structml_1_1movar_1_1variant_1ad86c1a464ad0c213a1100108c1fa558b" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>variant</name></member>
      <member refid="structml_1_1movar_1_1variant_1a68975c0e1eb9b3891040c8ccb7981e45" prot="public" virt="non-virtual"><scope>ml::movar::variant</scope><name>variant</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
