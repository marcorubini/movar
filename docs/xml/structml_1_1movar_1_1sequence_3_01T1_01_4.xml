<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structml_1_1movar_1_1sequence_3_01T1_01_4" kind="struct" language="C++" prot="public">
    <compoundname>ml::movar::sequence&lt; T1 &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>std::move_constructible</type>
        <declname>T1</declname>
        <defname>T1</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structml_1_1movar_1_1sequence_3_01T1_01_4_1abe048635c217ad2ebaccbc93c3767b7f" prot="public" static="no" mutable="no">
        <type>T1</type>
        <definition>T1 ml::movar::sequence&lt; T1 &gt;::_fn</definition>
        <argsstring></argsstring>
        <name>_fn</name>
        <qualifiedname>ml::movar::sequence&lt; T1 &gt;::_fn</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/sequence.hpp" line="57" column="8" bodyfile="ml/movar/internal/pipe/sequence.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structml_1_1movar_1_1sequence_3_01T1_01_4_1aba65ffee5862707ddb1af64bd0726a44" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr ml::movar::sequence&lt; T1 &gt;::sequence</definition>
        <argsstring>(T1 value) noexcept(std::is_nothrow_move_constructible_v&lt; T1 &gt;)</argsstring>
        <name>sequence</name>
        <qualifiedname>ml::movar::sequence&lt; T1 &gt;::sequence</qualifiedname>
        <param>
          <type>T1</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/sequence.hpp" line="59" column="15" bodyfile="ml/movar/internal/pipe/sequence.hpp" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1sequence_3_01T1_01_4_1a638d67d0b1f031e2af9f2d1c315eedff" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Arg</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::sequence&lt; T1 &gt;::operator()</definition>
        <argsstring>(Arg &amp;&amp;arg) const</argsstring>
        <name>operator()</name>
        <qualifiedname>ml::movar::sequence&lt; T1 &gt;::operator()</qualifiedname>
        <param>
          <type>Arg &amp;&amp;</type>
          <declname>arg</declname>
        </param>
    <requiresclause>(ml::internal::movar::WrapInvocable&lt;T1 const&amp;, Arg&gt;)    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/sequence.hpp" line="67" column="21" bodyfile="ml/movar/internal/pipe/sequence.hpp" bodystart="67" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1sequence_3_01T1_01_4_1a035e2c201015f8b162c2a41fab32ddf0" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Other</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::sequence&lt; T1 &gt;::operator&gt;&gt;</definition>
        <argsstring>(Other &amp;&amp;other) const &amp;</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>ml::movar::sequence&lt; T1 &gt;::operator&gt;&gt;</qualifiedname>
        <param>
          <type>Other &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/sequence.hpp" line="75" column="21" bodyfile="ml/movar/internal/pipe/sequence.hpp" bodystart="75" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1sequence_3_01T1_01_4_1afd86cc16bf2b7f86bdf25af31c914074" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Other</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::sequence&lt; T1 &gt;::operator&gt;&gt;</definition>
        <argsstring>(Other &amp;&amp;other) &amp;&amp;</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>ml::movar::sequence&lt; T1 &gt;::operator&gt;&gt;</qualifiedname>
        <param>
          <type>Other &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/sequence.hpp" line="82" column="21" bodyfile="ml/movar/internal/pipe/sequence.hpp" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1sequence_3_01T1_01_4_1a91c80e387e1214043fec34e826dc1944" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Other</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::sequence&lt; T1 &gt;::operator|</definition>
        <argsstring>(Other &amp;&amp;other) const &amp;</argsstring>
        <name>operator|</name>
        <qualifiedname>ml::movar::sequence&lt; T1 &gt;::operator|</qualifiedname>
        <param>
          <type>Other &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/sequence.hpp" line="89" column="21" bodyfile="ml/movar/internal/pipe/sequence.hpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="structml_1_1movar_1_1sequence_3_01T1_01_4_1a7caa5ff6cc963a759c79fbc09ee9d2cb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Other</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto ml::movar::sequence&lt; T1 &gt;::operator|</definition>
        <argsstring>(Other &amp;&amp;other) &amp;&amp;</argsstring>
        <name>operator|</name>
        <qualifiedname>ml::movar::sequence&lt; T1 &gt;::operator|</qualifiedname>
        <param>
          <type>Other &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ml/movar/internal/pipe/sequence.hpp" line="96" column="21" bodyfile="ml/movar/internal/pipe/sequence.hpp" bodystart="96" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ml/movar/internal/pipe/sequence.hpp" line="55" column="3" bodyfile="ml/movar/internal/pipe/sequence.hpp" bodystart="56" bodyend="101"/>
    <listofallmembers>
      <member refid="structml_1_1movar_1_1sequence_3_01T1_01_4_1abe048635c217ad2ebaccbc93c3767b7f" prot="public" virt="non-virtual"><scope>ml::movar::sequence&lt; T1 &gt;</scope><name>_fn</name></member>
      <member refid="structml_1_1movar_1_1sequence_3_01T1_01_4_1a638d67d0b1f031e2af9f2d1c315eedff" prot="public" virt="non-virtual"><scope>ml::movar::sequence&lt; T1 &gt;</scope><name>operator()</name></member>
      <member refid="structml_1_1movar_1_1sequence_3_01T1_01_4_1a035e2c201015f8b162c2a41fab32ddf0" prot="public" virt="non-virtual"><scope>ml::movar::sequence&lt; T1 &gt;</scope><name>operator&gt;&gt;</name></member>
      <member refid="structml_1_1movar_1_1sequence_3_01T1_01_4_1afd86cc16bf2b7f86bdf25af31c914074" prot="public" virt="non-virtual"><scope>ml::movar::sequence&lt; T1 &gt;</scope><name>operator&gt;&gt;</name></member>
      <member refid="structml_1_1movar_1_1sequence_3_01T1_01_4_1a91c80e387e1214043fec34e826dc1944" prot="public" virt="non-virtual"><scope>ml::movar::sequence&lt; T1 &gt;</scope><name>operator|</name></member>
      <member refid="structml_1_1movar_1_1sequence_3_01T1_01_4_1a7caa5ff6cc963a759c79fbc09ee9d2cb" prot="public" virt="non-virtual"><scope>ml::movar::sequence&lt; T1 &gt;</scope><name>operator|</name></member>
      <member refid="structml_1_1movar_1_1sequence_3_01T1_01_4_1aba65ffee5862707ddb1af64bd0726a44" prot="public" virt="non-virtual"><scope>ml::movar::sequence&lt; T1 &gt;</scope><name>sequence</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
